type Query {
  getCharacter(id: Int!): Character!
  getInventory(characterId: Int!): Inventory!
  getSoundboards: [Soundboard]!
  getSoundboard(soundboardId: Int!): Soundboard!
  getLatestUpdate: DevUpdate
  getArticle(id: Int!): Article!
  getArticles(params: ArticleOrder!): [Article]!
  getUser(id: Int!): User!
}

type Mutation {
  initializeCharacter(input: InitCharacterInput!): Character!
  characterStep(input: CharacterStepInput!): Character!
  finalizeCharacter(input: CharacterStepInput!): Character!
  createSoundboard(title: String!): Soundboard!
  deleteSoundboard(soundboardId: Int!): Boolean!
  deleteSoundboardLink(linkId: Int!): Boolean!
  addSoundboardLink(link: SoundboardLinkInput!): Boolean!
  publishUpdate(update: DevUpdateInput!): DevUpdate
  deleteUpdate(id: Int!): Boolean!
  editUpdate(update: DevUpdatePatchInput!, id: Int!): DevUpdate!
  createArticle(article: CreateArticleInput!): Article!
  deleteArticle(id: Int!): Boolean!
  signup(user: SignupInput!): User!
  login(credentials: LoginInput!): User!
  appleLogin(email: String!): User!
  waitListSignup(email: String!): Boolean!
  resetPasswordFromCode(credentials: PasswordResetInput!): Boolean!
  sendPasswordReset(email: String!): Boolean!
  updateUser(fullName: String!, id: Int!): User!
}

input CharacterStepInput {
  characterId: Int!
  character: CharacterInput!
}

input InitCharacterInput {
  userId: Int!
  character: CharacterInput!
}

input CharacterInput {
  name: String
  avatar: String
  race: Int
  class: Int
  background: Int
  status: String
  languages: [Int]
  stats: String
  hp: Int
  maxHP: Int
  tempHP: Int
  deathSaves: [Boolean]
  conditions: [Int]
  level: Int
  xp: Int
  proficiencies: [Int]
  eyes: String
  skin: String
  hair: String
  backstory: String
  height: String
  weight: String
  age: String
  alignment: Int
  gender: String
  personalityTraits: Int
  ideals: Int
  bonds: Int
  flaws: Int
  faith: String
  lifestyle: Int
  backgroundFeatures: [Int]
  characterStep: Int
}

type Character {
  id: Int!
  userId: Int!
  name: String
  avatar: String
  race: Int
  class: Int
  background: Int
  status: String
  languages: [Int]
  stats: String
  hp: Int
  maxHP: Int
  tempHP: Int
  deathSaves: [Boolean]
  conditions: [Int]
  level: Int
  xp: Int
  proficiencies: [Int]
  eyes: String
  skin: String
  hair: String
  backstory: String
  height: String
  weight: String
  age: String
  alignment: Int
  gender: String
  personalityTraits: Int
  ideals: Int
  bonds: Int
  flaws: Int
  faith: String
  lifestyle: Int
  backgroundFeatures: [Int]
  characterStep: Int
}

type Inventory {
  id: Int!
  characterId: Int!
  equipmentId: Int!
  quantity: Int!
}

input SoundboardLinkInput {
  title: String!
  url: String!
  soundboardId: Int!
}

type SoundboardLink {
  id: Int!
  title: String!
  url: String!
  soundboardId: Int!
}

type Soundboard {
  id: Int!
  title: String!
  userId: Int!
  links: [SoundboardLink]!
}

enum ArticleOrder {
  TOP
  ALL
}

input CreateArticleInput {
  title: String!
  url: String
  author: String!
  views: Int!
  content: [CreateArticleContentBlock]
}

input CreateArticleContentBlock {
  articleId: Int!
  type: String!
  fontSize: String!
  imageURL: String
  order: Int!
}

input DevUpdatePatchInput {
  title: String
  version: String
  releaseDate: String
  tags: [String]
  paragraphs: [String]
}

input DevUpdateInput {
  title: String!
  version: String
  releaseDate: String
  tags: [String]!
  paragraphs: [String]!
}

type DevUpdate {
  id: Int!
  title: String!
  version: String
  releaseDate: String
  tags: [String]!
  paragraphs: [String]!
}

type Article {
  id: Int!
  title: String!
  url: String
  author: String!
  views: Int!
  content: [ArticleContent]
}

type ArticleContent {
  id: Int!
  articleId: Int!
  type: String!
  fontSize: String!
  imageURL: String
  order: Int!
}

input PasswordResetInput {
  code: String!
  newPassword: String!
}

input LoginInput {
  email: String!
  password: String!
}

input SignupInput {
  name: String!
  email: String!
  password: String!
}

type User {
  id: Int!
  name: String!
  email: String!
  token: String
  createdAt: String!
}

schema {
  query: Query
  mutation: Mutation
}
