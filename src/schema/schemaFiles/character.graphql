type Query {
	getCharacter(id: Int!): Character!
	getInventory(characterId: Int!): Inventory!
}

type Mutation {
	initializeCharacter(input: InitCharacterInput!): Character!
	characterStep(input: CharacterStepInput!): Character!
	finalizeCharacter(input: CharacterStepInput!): Character!
}

input CharacterStepInput {
	characterId: Int!
	character: CharacterInput!
}

input InitCharacterInput {
	userId: Int!
	character: CharacterInput!
}

input CharacterInput {
	name: String
	avatar: String
	race: Int
	class: Int
	background: Int
	status: String
	languages: [Int]
	stats: String
	hp: Int
	maxHP: Int
	tempHP: Int
	deathSaves: [Boolean]
	conditions: [Int]
	level: Int
	xp: Int
	proficiencies: [Int]
	eyes: String
	skin: String
	hair: String
	backstory: String
	height: String
	weight: String
	age: String
	alignment: Int
	gender: String
	personalityTraits: Int
	ideals: Int
	bonds: Int
	flaws: Int
	faith: String
	lifestyle: Int
	backgroundFeatures: [Int]
	characterStep: Int
}

type Character {
	id: Int!
	userId: Int!
	name: String
	avatar: String
	race: Int
	class: Int
	background: Int
	status: String
	languages: [Int]
	stats: String
	hp: Int
	maxHP: Int
	tempHP: Int
	deathSaves: [Boolean]
	conditions: [Int]
	level: Int
	xp: Int
	proficiencies: [Int]
	eyes: String
	skin: String
	hair: String
	backstory: String
	height: String
	weight: String
	age: String
	alignment: Int
	gender: String
	personalityTraits: Int
	ideals: Int
	bonds: Int
	flaws: Int
	faith: String
	lifestyle: Int
	backgroundFeatures: [Int]
	characterStep: Int
}

type Inventory {
	id: Int!
	characterId: Int!
	equipmentId: Int!
	quantity: Int!
}
